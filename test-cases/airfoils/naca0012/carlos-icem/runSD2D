#!/bin/bash

# Command to create symlinks to a run script on the root folder on all subfolders
#find -maxdepth 20 -mindepth 1 -type d -not -path '*/\.*' -exec ln -rs ./runSD2D.sh '{}'/runSD2d \;

if [ -z "${sd2dBuild+x}" ]; then
    echo "sd2dBuild is unset";
    echo "sd2dBuild must point to sd2d build folder path"
    exit
fi

echo "sd2dBuild is set to '$sd2dBuild'";

# Ask the user which compiler and build type we should use and what to run.
echo "-----------------------------------------------------"
echo "Choose Fortran Compiler:"
echo "0 - Intel Compilers + Intel MPI"
echo "1 - GNU Compilers   + OpenMPI"
echo "2 - GNU Compilers   + MPICH"
echo "3 - GNU Compilers   + MVAPICH"
echo "-----------------------------------------------------"
read FCn;

case $FCn in
0)
    PETSC_ARCH=linux-intel
    FC="intel";;
1)
    PETSC_ARCH=linux-gnu-openmpi
    FC="gnu-openmpi";;
2)
    PETSC_ARCH=linux-gnu-mpich
    FC="gnu-mpich";;
3)
    PETSC_ARCH=linux-gnu-mvapich
    FC="gnu-mvapich";;
*)
    echo "English, motherfucker! Do you speak it!?"
    exit;;
esac

echo ""
echo "-----------------------------------------------------"
echo "Choose SD2D Build type:"
echo "0 - Debug"
echo "1 - Release"
echo "-----------------------------------------------------"
read sdBTn;

echo ""
echo "Pay attention if your compiler for this solver is the same compiler used to build PETSc"
echo "PETSC_DIR=${PETSC_DIR}"
echo "-----------------------------------------------------"
echo "Choose Build type of Petsc:"
echo "0 - Debug"
echo "1 - Release"
echo "-----------------------------------------------------"
read petscBTn

if [ $sdBTn == 0 ]; then
    if [ $petscBTn == 0 ]; then
        PETSC_ARCH="$PETSC_ARCH-dbg"
        CompMode='-dbg'
    fi;
    if [ $petscBTn == 1 ]; then
        PETSC_ARCH="$PETSC_ARCH-opt"
        CompMode='-sd2d-dbg-petsc-opt'
    fi;
fi;
if [ $sdBTn == 1 ]; then
    if [ $petscBTn == 0 ]; then
        PETSC_ARCH="$PETSC_ARCH-dbg"
        CompMode='-sd2d-opt-petsc-dbg'
    fi;
    if [ $petscBTn == 1 ]; then
        PETSC_ARCH="$PETSC_ARCH-opt"
        CompMode='-opt'
    fi;
fi;

echo ""
echo PETSC_ARCH="$PETSC_ARCH"
echo ""


echo "-----------------------------------------------------"
echo "What do want? (Add the numbers)"
echo "0 - Just make Workspaces"
echo "1 - Make workspace and run Preproc"
echo "2 - Make workspace and run Solver"
echo "-----------------------------------------------------"
read DW;
echo;

HomeFol=$(pwd);

#chamar make_workspace
for dirs in $(find -name *.inp | sed 's#\(.*\)/.*#\1#' | sort -u); do 
    cd $dirs;

    if [ -f workspace.txt ]; then rm workspace.txt ; fi;
    if [ -f *.msh ]; then
        echo $(find *.msh) | rev | cut -c 5- | rev >> workspace.txt;
        echo $(pwd)/ >> workspace.txt;
        echo "1" >> workspace.txt;
        echo >> workspace.txt;
    fi;
    if [ -f *.gmsh ]; then
        echo $(find *.gmsh) | rev | cut -c 6- | rev >> workspace.txt;
        echo $(pwd)/ >> workspace.txt;
        echo "1" >> workspace.txt;
        echo >> workspace.txt;
    fi;

    cd $HomeFol;
done;

if [ $((DW%2)) == 1 ]; then
    #chamar preproc
    for dirs in $(find -name *.inp | sed 's#\(.*\)/.*#\1#' | sort -u); do 
        cd $dirs;
        sleep 0.1

        if [ -f *.msh ]; then
            nohup /usr/bin/time -p -v $sd2dBuild/$FC$CompMode/bin/PreProc 1 --convert=fromfluent --format=ascii > nohup_preproc.out&
        fi;

        if [ -f *.gmsh ]; then
            nohup /usr/bin/time -p -v $sd2dBuild/$FC$CompMode/bin/PreProc 1 --convert=fromgmesh --format=ascii > nohup_preproc.out&
        fi;

        cd $HomeFol;
    done;
fi;
let "DW /= 2";

if [ $((DW%2)) == 1 ]; then
    #chamar solver
    for dirs in $(find -name *.inp | sed 's#\(.*\)/.*#\1#' | sort -u); do 
        cd $dirs;
        sleep 0.1
        if [ $petscBTn == 0 ]; then
            nohup mpirun -np 1 /usr/bin/time -p -v $sd2dBuild/$FC$CompMode/bin/Solver -info > nohup_solver.out&
        fi
        if [ $petscBTn == 1 ]; then
            nohup mpirun -np 1 /usr/bin/time -p -v $sd2dBuild/$FC$CompMode/bin/Solver -log_summary > nohup_solver.out&
        fi
        cd $HomeFol;
    done;
fi;
let "DW /= 2";

